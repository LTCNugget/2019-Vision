import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.vision.VisionPipeline;

/**
 * GripHUDPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripHUDPipeline implements VisionPipeline {

	//Outputs
	private Mat cvCrosshairVBottomOutput = new Mat();
	private Mat cvCrosshairVMiddleOutput = new Mat();
	private Mat cvCrosshairVTopOutput = new Mat();
	private Mat cvCrosshairHOutput = new Mat();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override
	public void process(Mat source0) {

		// Step CV_rectangle0:
		Mat cvCrosshairVBottomSrc = source0;
		Point cvCrosshairVBottomPt1 = new Point(208, 150);
		Point cvCrosshairVBottomPt2 = new Point(208, 240);
		Scalar cvCrosshairVBottomColor = new Scalar(0.0, 0.0, 0.0, 0.0);
		double cvCrosshairVBottomThickness = 2.0;
		int cvCrosshairVBottomLinetype = Core.LINE_4;
		double cvCrosshairVBottomShift = 0.0;
		cvRectangle(cvCrosshairVBottomSrc, cvCrosshairVBottomPt1, cvCrosshairVBottomPt2, cvCrosshairVBottomColor, cvCrosshairVBottomThickness, cvCrosshairVBottomLinetype, cvCrosshairVBottomShift, cvCrosshairVBottomOutput);

		// Step CV_rectangle1:
		Mat cvCrosshairVMiddleSrc = cvCrosshairVBottomOutput;
		Point cvCrosshairVMiddlePt1 = new Point(208, -1);
		Point cvCrosshairVMiddlePt2 = new Point(208, 240);
		Scalar cvCrosshairVMiddleColor = new Scalar(0.0, 0.0, 0.0, 0.0);
		double cvCrosshairVMiddleThickness = 1.0;
		int cvCrosshairVMiddleLinetype = Core.LINE_4;
		double cvCrosshairVMiddleShift = 0;
		cvRectangle(cvCrosshairVMiddleSrc, cvCrosshairVMiddlePt1, cvCrosshairVMiddlePt2, cvCrosshairVMiddleColor, cvCrosshairVMiddleThickness, cvCrosshairVMiddleLinetype, cvCrosshairVMiddleShift, cvCrosshairVMiddleOutput);

		// Step CV_rectangle2:
		Mat cvCrosshairVTopSrc = cvCrosshairVMiddleOutput;
		Point cvCrosshairVTopPt1 = new Point(208, -1);
		Point cvCrosshairVTopPt2 = new Point(208, 90);
		Scalar cvCrosshairVTopColor = new Scalar(0.0, 0.0, 0.0, 0.0);
		double cvCrosshairVTopThickness = 2.0;
		int cvCrosshairVTopLinetype = Core.LINE_4;
		double cvCrosshairVTopShift = 0;
		cvRectangle(cvCrosshairVTopSrc, cvCrosshairVTopPt1, cvCrosshairVTopPt2, cvCrosshairVTopColor, cvCrosshairVTopThickness, cvCrosshairVTopLinetype, cvCrosshairVTopShift, cvCrosshairVTopOutput);

		// Step CV_rectangle3:
		Mat cvCrosshairHSrc = cvCrosshairVTopOutput;
		Point cvCrosshairHPt1 = new Point(187, 120);
		Point cvCrosshairHPt2 = new Point(229, 120);
		Scalar cvCrosshairHColor = new Scalar(0.0, 0.0, 0.0, 0.0);
		double cvCrosshairHThickness = 1.0;
		int cvCrosshairHLinetype = Core.LINE_4;
		double cvCrosshairHShift = 0;
		cvRectangle(cvCrosshairHSrc, cvCrosshairHPt1, cvCrosshairHPt2, cvCrosshairHColor, cvCrosshairHThickness, cvCrosshairHLinetype, cvCrosshairHShift, cvCrosshairHOutput);

	}

	/**
	 * This method is a generated getter for the output of a CV_rectangle.
	 * @return Mat output from CV_rectangle.
	 */
	public Mat cvCrosshairVBottomOutput() {
		return cvCrosshairVBottomOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_rectangle.
	 * @return Mat output from CV_rectangle.
	 */
	public Mat cvCrosshairVMiddleOutput() {
		return cvCrosshairVMiddleOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_rectangle.
	 * @return Mat output from CV_rectangle.
	 */
	public Mat cvCrosshairVTopOutput() {
		return cvCrosshairVTopOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_rectangle.
	 * @return Mat output from CV_rectangle.
	 */
	public Mat cvCrosshairHOutput() {
		return cvCrosshairHOutput;
	}

	/**
	 * Draws a rectangle on an image.
	 * @param src Image to draw rectangle on.
	 * @param pt1 one corner of the rectangle.
	 * @param pt2 opposite corner of the rectangle.
	 * @param color Scalar indicating color to make the rectangle.
	 * @param thickness Thickness of the lines of the rectangle.
	 * @param lineType Type of line for the rectangle.
	 * @param shift Number of decimal places in the points.
	 * @param dst output image.
	 */
	private void cvRectangle(Mat src, Point pt1, Point pt2, Scalar color,
		double thickness, int lineType, double shift, Mat dst) {
		src.copyTo(dst);
		if (color == null) {
			color = Scalar.all(1.0);
		}
		Imgproc.rectangle(dst, pt1, pt2, color, (int)thickness, lineType, (int)shift);
	}




}

